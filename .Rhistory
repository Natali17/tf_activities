norm_df1 <- norm_gsea1@result %>%
select(ID, Description, p.adjust, GeneRatio) %>%
mutate(Group = "Norm")
depr_df1 <- depr_gsea1@result %>%
select(ID, Description, p.adjust, GeneRatio) %>%
mutate(Group = "Depr")
combined_df1 <- bind_rows(norm_df1, depr_df1)
View(combined_df1)
View(combined_df)
View(combined_df)
as.data.frame(peakAnno)[1:5, ]
# Извлечение списка EntrezID генов из аннотации
norm_genes_entrez <- as.data.frame(peakAnno)$SYMBOL
norm_gsea <- enrichGO(gene = norm_genes_entrez,
OrgDb = org.Hs.eg.db,
ont = "BP", # Biological Process
pAdjustMethod = "BH",
pvalueCutoff = 0.1)
# Извлечение списка EntrezID генов из аннотации
norm_genes_entrez <- as.data.frame(peakAnno)$geneId
norm_gsea <- setReadable(norm_gsea, OrgDb = org.Hs.eg.db, keyType = "ENTREZID")
norm_gsea <- enrichGO(gene = norm_genes_entrez,
OrgDb = org.Hs.eg.db,
ont = "BP", # Biological Process
pAdjustMethod = "BH",
pvalueCutoff = 0.1)
norm_gsea <- setReadable(norm_gsea, OrgDb = org.Hs.eg.db, keyType = "ENTREZID")
View(norm_gsea)
# Визуализация dotplot
dotplot(norm_gsea, showCategory = 20, title = "Norm RMST - GO BP enrichment")
View(depr_gsea)
depr_gsea <- setReadable(depr_gsea, OrgDb = org.Hs.eg.db, keyType = "ENTREZID")
norm_df <- norm_gsea@result %>%
select(ID, Description, p.adjust, GeneRatio) %>%
mutate(Group = "Norm")
depr_df <- depr_gsea@result %>%
select(ID, Description, p.adjust, GeneRatio) %>%
mutate(Group = "Depr")
combined_df <- bind_rows(norm_df, depr_df)
norm_df <- norm_gsea@result %>%
select(ID, Description, p.adjust, GeneRatio, geneID) %>%
mutate(Group = "Norm")
depr_df <- depr_gsea@result %>%
select(ID, Description, p.adjust, GeneRatio, geneID) %>%
mutate(Group = "Depr")
combined_df <- bind_rows(norm_df, depr_df)
norm_gsea <- enrichGO(gene = norm_genes_entrez,
OrgDb = org.Hs.eg.db,
ont = "CC", # Biological Process
pAdjustMethod = "BH",
pvalueCutoff = 0.1)
# Визуализация dotplot
dotplot(norm_gsea, showCategory = 20, title = "Norm RMST - GO BP enrichment")
norm_gsea <- enrichGO(gene = norm_genes_entrez,
OrgDb = org.Hs.eg.db,
ont = "MF", # Biological Process
pAdjustMethod = "BH",
pvalueCutoff = 0.1)
# Визуализация dotplot
dotplot(norm_gsea, showCategory = 20, title = "Norm RMST - GO BP enrichment")
depr_gsea <- enrichGO(gene = depr_genes_entrez,
OrgDb = org.Hs.eg.db,
ont = "CC",
pAdjustMethod = "BH",
pvalueCutoff = 0.1)
dotplot(depr_gsea, showCategory = 20, title = "Depr RMST - GO BP enrichment")
depr_gsea <- enrichGO(gene = depr_genes_entrez,
OrgDb = org.Hs.eg.db,
ont = "MF",
pAdjustMethod = "BH",
pvalueCutoff = 0.1)
dotplot(depr_gsea, showCategory = 20, title = "Depr RMST - GO BP enrichment")
norm_df <- norm_gsea@result %>%
select(ID, Description, p.adjust, GeneRatio) %>%
mutate(Group = "Norm")
depr_df <- depr_gsea@result %>%
select(ID, Description, p.adjust, GeneRatio) %>%
mutate(Group = "Depr")
combined_df <- bind_rows(norm_df, depr_df)
View(combined_df)
write.table(combined_df, file = "combined_df.tsv", sep = "\t", row.names = FALSE, quote = FALSE)
write.table(combined_df, file = "combined_df.xlsx", sep = "\t", row.names = FALSE, quote = FALSE)
View(combined_df)
View(combined_df)
norm_gsea <- enrichGO(gene = norm_genes_entrez,
OrgDb = org.Hs.eg.db,
ont = "BP", # Biological Process
pAdjustMethod = "BH",
pvalueCutoff = 0.1)
depr_gsea <- enrichGO(gene = depr_genes_entrez,
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.1)
norm_df <- norm_gsea@result %>%
select(ID, Description, p.adjust, GeneRatio) %>%
mutate(Group = "Norm")
depr_df <- depr_gsea@result %>%
select(ID, Description, p.adjust, GeneRatio) %>%
mutate(Group = "Depr")
combined_df <- bind_rows(norm_df, depr_df)
write.table(combined_df, file = "combined_df.xlsx", sep = "\t", row.names = FALSE, quote = FALSE)
View(combined_df)
getwd()
setwd('/home/natal/maradoner_project')
setwd('/mnt/home/natal/maradoner_project')
cell_lines <- read.table('/Users/natal/PycharmProjects/contests/promoters/october2025/cell_lines_log2tmm.tsv')
tcga <- read.table('/Users/natal/PycharmProjects/contests/promoters/october2025/tcga_log2tmm.tsv')
cell_lines <- read.table("//wsl$/Ubuntu/home/natal/maradoner_project/cell_lines_log2tmm_filtered.tsv")
tcga <- read.table("//wsl$/Ubuntu/home/natal/maradoner_project/tcga_log2tmm_filtered.tsv")
View(cell_lines)
all_counts - merge(cell_lines, tcga, by = rownames(cell_lines))
all_counts <- merge(cell_lines, tcga, by = rownames(cell_lines))
all_counts <- merge(cell_lines, tcga, by.x = rownames(cell_lines))
all_counts <- merge(cell_lines, tcga, by.x = rownames(cell_lines), by.y = rownames(tcga))
cell_lines$Gene_ID <- rownames(cell_lines)
tcga$Gene_ID <- rownames(tcga)
all_counts <- merge(cell_lines, tcga, by.x = "Gene_ID", by.y = "Gene_ID")
write.table(all_counts, file = "//wsl$/Ubuntu/home/natal/maradoner_project/all_counts_log2tmm_filtered.tsv",
sep = "\t",
quote = FALSE,
row.names = TRUE,
col.names = NA)
all_counts$Gene_ID <- NULL
write.table(all_counts, file = "//wsl$/Ubuntu/home/natal/maradoner_project/all_counts_log2tmm_filtered.tsv",
sep = "\t",
quote = FALSE,
row.names = TRUE,
col.names = NA)
View(all_counts)
all_counts <- merge(cell_lines, tcga, by.x = "Gene_ID", by.y = "Gene_ID")
rownames(all_counts) <- all_counts$Gene_ID
all_counts$Gene_ID <- NULL
write.table(all_counts, file = "//wsl$/Ubuntu/home/natal/maradoner_project/all_counts_log2tmm_filtered.tsv",
sep = "\t",
quote = FALSE,
row.names = TRUE,
col.names = NA)
cell_lines <- read.table("//wsl$/Ubuntu/home/natal/maradoner_project/cell_lines_log2tmm_filtered_2.tsv")
tcga <- read.table("//wsl$/Ubuntu/home/natal/maradoner_project/tcga_log2tmm_filtered_2.tsv")
View(tcga)
cell_lines$Gene_ID <- rownames(cell_lines)
tcga$Gene_ID <- rownames(tcga)
all_counts <- merge(cell_lines, tcga, by.x = "Gene_ID", by.y = "Gene_ID")
rownames(all_counts) <- all_counts$Gene_ID
all_counts$Gene_ID <- NULL
write.table(all_counts, file = "//wsl$/Ubuntu/home/natal/maradoner_project/all_counts_log2tmm_filtered_2.tsv",
sep = "\t",
quote = FALSE,
row.names = TRUE,
col.names = NA)
View(all_counts)
setwd("~")
getwd()
library(dplyr)
library(limma)
library(edgeR)
good_types <- c('IG_C_gene','IG_V_gene','protein_coding','TR_V_gene','transcribed_unitary_pseudogene')
getwd()
setwd('/home/natal/maradoner_project/tcga_total_counts.tsv')
setwd('/mnt/home/natal/maradoner_project/tcga_total_counts.tsv')
setwd('/mnt/home/natal/maradoner_project')
setwd('/home/natal/maradoner_project')
setwd("/mnt/home/natal/maradoner_project")
list.dirs("/mnt", recursive = FALSE)
list.dirs("/home", recursive = FALSE)
list.dirs("/natal", recursive = FALSE)
list.dirs("/aradoner_projectm", recursive = FALSE)
list.dirs("/maradoner_project", recursive = FALSE)
setwd('/home')
setwd("~/maradoner_project")
setwd("C:/Users/natal/maradoner_project")
getwd()
list.files()
setwd("//wsl.localhost/Ubuntu/home/natal/maradoner_project")
total.counts <- read.table('tcga_total_counts.tsv',header = 1, row.names = 1)
good_types <- c('IG_C_gene','IG_V_gene','protein_coding','TR_V_gene','transcribed_unitary_pseudogene')
total_counts <- read.csv("/Users/natal/PycharmProjects/contests/promoters/october2025/TCGA_only_labeled_meta.csv", header = TRUE, row.names = 1)
total_counts <- read.csv("/mnt//Users/natal/PycharmProjects/contests/promoters/october2025/TCGA_only_labeled_meta.csv", header = TRUE, row.names = 1)
total_counts <- read.csv("C/Users/natal/PycharmProjects/contests/promoters/october2025/TCGA_only_labeled_meta.csv", header = TRUE, row.names = 1)
total_counts <- read.csv("/C/Users/natal/PycharmProjects/contests/promoters/october2025/tcga_total_counts.tsv", header = TRUE, row.names = 1)
total_counts <- read.csv("/C/users/natal/PycharmProjects/contests/promoters/october2025/tcga_total_counts.tsv", header = TRUE, row.names = 1)
total_counts <- read.csv("/C:/users/natal/PycharmProjects/contests/promoters/october2025/tcga_total_counts.tsv", header = TRUE, row.names = 1)
total_counts <- read.csv("C:/users/natal/PycharmProjects/contests/promoters/october2025/tcga_total_counts.tsv", header = TRUE, row.names = 1)
total_counts <- read.csv("C:/users/natal/PycharmProjects/contests/promoters/october2025/tcga_total_counts.tsv", header = 1, row.names = 1)
total_counts <- read.table("C:/users/natal/PycharmProjects/contests/promoters/october2025/tcga_total_counts.tsv", header = 1, row.names = 1)
View(total_counts)
total_counts$gene_type
total_counts$unique(gene_type)
total_counts$gene_type.unique()
unique(total_counts$gene_type)
good_types <- c('IG_*_gene','TR_*_gene','protein_coding')
total.counts %>% filter(gene_type %in% good_types) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame(row.names = 'gene_name') -> dedup.ch.type.counts
View(total_counts)
View(total_counts)
good_types <- c('IG_C_gene','IG_V_gene','protein_coding','TR_V_gene','transcribed_unitary_pseudogene')
total_counts %>% filter(gene_type %in% good_types) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame(row.names = 'gene_name') -> dedup.ch.type.counts
View(dedup.ch.type.counts)
View(total_counts)
colnames(total_counts[1:3]
colnames(total_counts[1:3])
colnames(total_counts, 1:3)
colnames(total_counts, )
colnames(total_counts, [1:3])
colnames(total_counts, c(1:3))
total_counts[ , 1:3]
colnames(total_counts)[c(1, 3, 5)]
zeros_AAA <- rowSums(dedup.ch.type.counts[, sapply(dedup.ch.type.counts, is.numeric)])
zero_counts <- rowSums(dedup.ch.type.counts[, sapply(dedup.ch.type.counts, is.numeric)] == 0)
# Берём только гены с суммой экспрессии > 0
expressed_genes <- names(which(rowSums(dedup.ch.type.counts[, sapply(dedup.ch.type.counts, is.numeric)]) > 0))
View(dedup.ch.type.counts)
expressed_genes <- names(which(rowSums(dedup.ch.type.counts[, sapply(dedup.ch.type.counts, is.numeric)]) > 0))
# Берём только гены с суммой экспрессии > 0
str(dedup.ch.type.counts)
expressed_genes <- rownames(dedup.ch.type.counts)[
rowSums(dedup.ch.type.counts[, 2:ncol(dedup.ch.type.counts)]) > 0
]
expressed_genes <- rownames(dedup.ch.type.counts)[
rowSums(dedup.ch.type.counts[, 2:ncol(dedup.ch.type.counts)], na.rm = TRUE) > 0
]
# Берём только гены с суммой экспрессии > 0
count_matrix <- dedup.ch.type.counts[, 2:ncol(dedup.ch.type.counts)]
expressed_genes <- rownames(count_matrix)[rowSums(count_matrix, na.rm = TRUE) > 0]
# Load tumor cluster metadata
tumor_clusters <- read.csv("TCGA_only_labeled_meta.csv", header = TRUE, row.names = 1)
# Load tumor cluster metadata
tumor_clusters <- read.csv("/Users/natal/PycharmProjects/contests/promoters/october2025/TCGA_only_labeled_meta.csv", header = TRUE, row.names = 1)
# Load tumor cluster metadata
tumor_clusters <- read.csv("C:/Users/natal/PycharmProjects/contests/promoters/october2025/TCGA_only_labeled_meta.csv", header = TRUE, row.names = 1)
# Replace dots with hyphens in sample names for consistency
tumor_clusters$name <- gsub("\\.", "-", tumor_clusters$name)
# Load tumor cluster metadata
tumor_clusters <- read.csv("C:/Users/natal/PycharmProjects/contests/promoters/october2025/TCGA_only_labeled_meta.csv", header = TRUE, row.names = 1)
View(tumor_clusters)
all(tumor_clusters$name2 %in% colnames(count_matrix))
tumor_clusters <- tumor_clusters[match(colnames(count_matrix), tumor_clusters$name2), ]
# Define sample groups (factor levels) for analysis
groups <- factor(tumor_clusters$Subtype, levels=c("DDF Tumor","NAT", "Standard Tumor"))
groups
Total.DGE <- DGEList(
counts = count_matrix[expressed_genes, ],
genes = expressed_genes,
samples = data.frame(SampleID = colnames(count_matrix)),
group = groups
)
Total.DGE <- calcNormFactors(Total.DGE,method = 'TMM')
debatched = removeBatchEffect(log1p(cpm(Total.DGE)),batch = total.meta$protocol)
debatched = removeBatchEffect(log1p(cpm(Total.DGE)))
write.csv(debatched, file = "debatched_counts.csv", row.names = TRUE)
# Берём только гены с суммой экспрессии > 0
rownames(total_counts) <- total_counts$gene_name
# Берём только гены с суммой экспрессии > 0
rownames(dedup.ch.type.counts) <- dedup.ch.type.counts$gene_name
View(dedup.ch.type.counts)
count_matrix <- dedup.ch.type.counts[, 2:ncol(dedup.ch.type.counts)]
View(count_matrix)
View(count_matrix)
expressed_genes <- rownames(count_matrix)[rowSums(count_matrix, na.rm = TRUE) > 0]
# Check that metadata names match the expression data
all(tumor_clusters$name2 %in% colnames(count_matrix))
# Reorder metadata to match expression data columns
tumor_clusters <- tumor_clusters[match(colnames(count_matrix), tumor_clusters$name2), ]
View(tumor_clusters)
# Define sample groups (factor levels) for analysis
groups <- factor(tumor_clusters$Subtype, levels=c("DDF Tumor","NAT", "Standard Tumor"))
groups
Total.DGE <- DGEList(
counts = count_matrix[expressed_genes, ],
genes = expressed_genes,
samples = data.frame(SampleID = colnames(count_matrix)),
group = groups
)
Total.DGE <- calcNormFactors(Total.DGE,method = 'TMM')
debatched = removeBatchEffect(log1p(cpm(Total.DGE)))
write.csv(debatched, file = "debatched_counts.csv", row.names = TRUE)
write.csv(debatched, file = "debatched_counts.csv", row.names = TRUE)
# Convert to log2 CPM with prior count to avoid log(0)
log2_tmm <- log2(cpm(Total.DGE, prior.count = 1))
write.table(log2_tmm, file = "tcga_log2tmm_rnd.tsv",
sep = "\t",
quote = FALSE,
row.names = TRUE,
col.names = NA)
### Part 3. The same for cell_lines expression data
total_counts_1 <- read.table("C:/users/natal/PycharmProjects/contests/promoters/october2025/cell_lines_total_counts.tsv", header = 1, row.names = 1)
View(total_counts_1)
# Load TCGA gene expression counts
total_counts <- read.table("C:/users/natal/PycharmProjects/contests/promoters/october2025/tcga_total_counts.tsv", header = 1, row.names = 1)
# Define gene types that should be remained
good_types <- c('IG_C_gene','IG_V_gene','protein_coding','TR_V_gene','transcribed_unitary_pseudogene')
# Filter expression data
total_counts %>% filter(gene_type %in% good_types) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame(row.names = 'gene_name') -> dedup.ch.type.counts
View(dedup.ch.type.counts)
total_counts %>% filter(gene_type %in% good_types) %>% group_by(gene_name) -> dedup.ch.type.counts
View(dedup.ch.type.counts)
# Filter expression data
total_counts_1 %>% filter(gene_name %in% dedup.ch.type.counts$gene_name) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame(row.names = 'gene_name') -> dedup.ch.type.counts_1
View(dedup.ch.type.counts)
View(dedup.ch.type.counts_1)
View(dedup.ch.type.counts)
# Take only the genes with a total expression sum > 0
rownames(dedup.ch.type.counts_1) <- dedup.ch.type.counts_1$gene_name
count_matrix_1 <- dedup.ch.type.counts_1[, 2:ncol(dedup.ch.type.counts_1)]
expressed_genes_1 <- rownames(count_matrix_1)[rowSums(count_matrix_1, na.rm = TRUE) > 0]
# Load tumor cluster metadata
cell_lines_clusters <- read.csv("C:/Users/natal/PycharmProjects/contests/promoters/october2025/Cell_lines_protocols.csv", header = TRUE, row.names = 1)
View(cell_lines_clusters)
# Load TCGA gene expression counts
tcga <- read.table("C:/users/natal/PycharmProjects/contests/promoters/october2025/tcga_total_counts.tsv", header = 1, row.names = 1)
cell_lines <- read.table("C:/users/natal/PycharmProjects/contests/promoters/october2025/cell_lines_total_counts.tsv", header = 1, row.names = 1)
# Filter expression data
tcga %>% filter(gene_type %in% good_types) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame(row.names = 'gene_name') -> dedup.ch.type.tcga
# Define gene types that should be remained
good_types <- c('IG_C_gene','IG_V_gene','protein_coding','TR_V_gene','transcribed_unitary_pseudogene')
# Filter expression data
tcga %>% filter(gene_type %in% good_types) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame(row.names = 'gene_name') -> dedup.ch.type.tcga
View(dedup.ch.type.tcga)
# Take only the genes with a total expression sum > 0
rownames(dedup.ch.type.tcga) <- dedup.ch.type.tcga$gene_name
# Filter expression data
tcga %>% filter(gene_type %in% good_types) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame(row.names = 'gene_name') -> dedup.ch.type.tcga
# Filter expression data
tcga %>% filter(gene_type %in% good_types) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame(rownames = 'gene_name') -> dedup.ch.type.tcga
View(dedup.ch.type.tcga)
# Filter expression data
tcga %>% filter(gene_type %in% good_types) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame(rownames = tcga$gene_name) -> dedup.ch.type.tcga
View(dedup.ch.type.tcga)
# Filter expression data
tcga %>% filter(gene_type %in% good_types) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame() -> dedup.ch.type.tcga
rownames(dedup.ch.type.tcga) <- dedup.ch.type.tcga$gene_name
View(cell_lines)
cell_lines %>% filter(gene_name %in% rownames(dedup.ch.type.tcga)) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame() <- dedup.ch.type.cell_lines
cell_lines %>% filter(gene_name %in% rownames(dedup.ch.type.tcga)) %>% group_by(gene_name) %>% summarize_if(is.numeric,sum) %>% as.data.frame() -> dedup.ch.type.cell_lines
View(dedup.ch.type.cell_lines)
rownames(dedup.ch.type.cell_lines) <- dedup.ch.type.cell_lines$gene_name
# Unite tcga data with cell_line data
all_counts <- merge(tcga, cell_lines, by.x = "gene_name", by.y = "gene_name")
View(all_counts)
View(dedup.ch.type.tcga)
View(cell_lines)
# Unite tcga data with cell_line data
rm(all_counts)
# Unite tcga data with cell_line data
all_counts <- merge(dedup.ch.type.tcga, dedup.ch.type.cell_lines, by.x = "gene_name", by.y = "gene_name")
View(all_counts)
rownames(all_counts) <- all_counts$gene_name
all_counts$gene_name <- NULL
rm(cell_lines, tcga)
zeros_AAA <- rowSums(dedup.ch.type.cell_lines[,rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'poly-A']]) # Выбираются сэмплы poly_A (TCGA + some cell-lines) и суммируются погенно
# Load expression metadata
tumor_clusters <- read.csv("C:/Users/natal/PycharmProjects/contests/promoters/october2025/TCGA_only_labeled_meta.csv", header = TRUE, row.names = 1)
cell_lines_clusters <- read.csv("C:/Users/natal/PycharmProjects/contests/promoters/october2025/Cell_lines_protocols.csv", header = TRUE, row.names = 1)
View(cell_lines_clusters)
zeros_AAA <- rowSums(dedup.ch.type.cell_lines[,rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'poly-A']]) # Выбираются сэмплы poly_A (TCGA + some cell-lines) и суммируются погенно
zeros_AAA <- rowSums(dedup.ch.type.cell_lines[,rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'poly-A']]) + rowSums(dedup.ch.type.tcga[ , rownames(dedup.ch.type.tcga)]# Выбираются сэмплы poly_A (TCGA + some cell-lines) и суммируются погенно
zeros_AAA <- rowSums(dedup.ch.type.cell_lines[,rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'poly-A']]) + rowSums(dedup.ch.type.tcga[ , rownames(dedup.ch.type.tcga)])# Выбираются сэмплы poly_A (TCGA + some cell-lines) и суммируются погенно
zeros_AAA <- rowSums(dedup.ch.type.cell_lines[,rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'poly-A']]) + rowSums(dedup.ch.type.tcga[ , rownames(dedup.ch.type.tcga)])# Выбираются сэмплы poly_A (TCGA + some cell-lines) и суммируются погенно
View(dedup.ch.type.tcga)
zeros_AAA <- rowSums(
dedup.ch.type.cell_lines[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'poly-A']]
) + rowSums(
dedup.ch.type.tcga[, rownames(dedup.ch.type.tcga)]
)
# 1. Суммируем по cell_lines (только poly-A колонки)
cell_lines_sum <- rowSums(dedup.ch.type.cell_lines[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'poly-A']], na.rm = TRUE
)
# 2. Суммируем по TCGA (все колонки)
tcga_sum <- rowSums(dedup.ch.type.tcga, na.rm = TRUE)
View(dedup.ch.type.cell_lines)
View(dedup.ch.type.cell_lines)
View(dedup.ch.type.tcga)
# 2. Суммируем по TCGA (все колонки)
dedup.ch.type.tcga[, 2:ncol(dedup.ch.type.tcga)] <- lapply(dedup.ch.type.tcga[, 2:ncol(dedup.ch.type.tcga)], function(x) as.numeric(as.character(x)))
tcga_sum <- rowSums(dedup.ch.type.tcga, na.rm = TRUE)
tcga_numeric <- dedup.ch.type.tcga[, sapply(dedup.ch.type.tcga, is.numeric)]
tcga_sum <- rowSums(tcga_numeric, na.rm = TRUE)
# 3. Объединяем суммы по генам
# Сначала согласуем порядок генов
common_genes <- intersect(rownames(cell_lines_sum), rownames(tcga_sum))
# 1. Суммируем по cell_lines (только poly-A колонки)
cell_lines_numeric <- dedup.ch.type.cell_lines[, sapply(dedup.ch.type.cell_lines, is.numeric)]
cell_lines_sum <- rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'poly-A']], na.rm = TRUE
)
# 3. Объединяем суммы по генам
# Сначала согласуем порядок генов
common_genes <- intersect(rownames(cell_lines_sum), rownames(tcga_sum))
tcga_sum <- as.data.frame(rowSums(tcga_numeric, na.rm = TRUE))
View(tcga_sum)
cell_lines_sum <- as.data.frame(rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'poly-A']], na.rm = TRUE
))
View(cell_lines_sum)
cell_lines_sum$expression <- cell_lines_sum$`rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == "poly-A"]], na.rm = TRUE)`
cell_lines_sum$`rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == "poly-A"]], na.rm = TRUE)` <- NULL
tcga_sum$expression <- tcga_sum$`rowSums(tcga_numeric, na.rm = TRUE)`
tcga_sum$`rowSums(tcga_numeric, na.rm = TRUE)` <- NULL
# 3. Объединяем суммы по генам
# Сначала согласуем порядок генов
common_genes <- intersect(rownames(cell_lines_sum), rownames(tcga_sum))
zeros_AAA <- cell_lines_sum[common_genes] + tcga_sum[common_genes]
zeros_AAA <- rownames(cell_lines_sum)[common_genes] + rownames(tcga_sum)[common_genes]
zeros_AAA <- cell_lines_sum[common_genes] + tcga_sum[common_genes]
common_genes <- intersect(names(cell_lines_sum), names(tcga_sum))
zeros_AAA <- cell_lines_sum[common_genes] + tcga_sum[common_genes]
View(zeros_AAA)
View(cell_lines_numeric)
zeros_total <- as.data.frame(rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'total']], na.rm = TRUE
))
View(zeros_total)
View(cell_lines_sum)
View(dedup.ch.type.cell_lines)
zeros_total <- as.data.frame(rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'total']], na.rm = TRUE
))
View(zeros_total)
View(cell_lines_numeric)
View(cell_lines_clusters)
zeros_total <- as.data.frame(rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'Total RNA']], na.rm = TRUE
))
zeros_total <- rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'Total RNA']], na.rm = TRUE)
zeros_total <- rowSums(dedup.ch.type.counts[,rownames(total.meta)[total.meta$protocol == 'total']], na.rm = TRUE) # Выбираются сэмплы total (some cell-lines) и суммируются погенно
zeros_total <- rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'Total RNA']])
# 4. Суммируем по cell_lines (только total RNA колонки)
zeros_total <- rowSums(dedup.ch.type.cell_lines[,rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'Total RNA']])
View(cell_lines_clusters)
cell_lines_sum1 <- as.data.frame(rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'Total RNA']], na.rm = TRUE
))
View(cell_lines_numeric)
View(cell_lines_clusters)
# 1. Суммируем по cell_lines (только poly-A колонки)
cell_lines_numeric <- dedup.ch.type.cell_lines[, sapply(dedup.ch.type.cell_lines, is.numeric)]
cell_lines_sum <- as.data.frame(rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'poly-A']], na.rm = TRUE
))
cell_lines_sum1 <- as.data.frame(rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'Total RNA']], na.rm = TRUE
))
cell_lines_sum1 <- as.data.frame(rowSums(cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'Total*']], na.rm = TRUE
))
View(cell_lines_sum1)
cell_lines_sum1 <- as.data.frame(
rowSums(
cell_lines_numeric[, rownames(cell_lines_clusters)[grepl("Total", cell_lines_clusters$protocol)]],
na.rm = TRUE
)
)
cell_lines_clusters$protocol <- trimws(cell_lines_clusters$protocol)  # убрать лишние пробелы
# 4. Суммируем по cell_lines (только total RNA колонки)
cell_lines_numeric_2 <-
zeros_total <- rowSums(dedup.ch.type.cell_lines[,rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'Total RNA']])
cell_lines_sum1 <- as.data.frame(
rowSums(
cell_lines_numeric[, rownames(cell_lines_clusters)[grepl("Total", cell_lines_clusters$protocol)]],
na.rm = TRUE
)
)
cell_lines_sum1 <- as.data.frame(
rowSums(
cell_lines_numeric[, rownames(cell_lines_clusters)[grepl("RNA", cell_lines_clusters$protocol)]],
na.rm = TRUE
)
)
cell_lines_sum1 <- as.data.frame(
rowSums(
cell_lines_numeric[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == "Total RNA"]],
na.rm = TRUE
)
)
setdiff(
rownames(cell_lines_clusters)[cell_lines_clusters$protocol == "Total RNA"],
colnames(cell_lines_numeric)
)
rownames(cell_lines_clusters) <- trimws(rownames(cell_lines_clusters))
zeros_total <- rowSums(dedup.ch.type.cell_lines[,rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'Total RNA']])
zeros_total <- as.data.frame(rowSums(dedup.ch.type.cell_lines[,rownames(cell_lines_clusters)[cell_lines_clusters$protocol == 'Total RNA']]))
View(zeros_total)
zeros_total$expression <- zeros_total$`rowSums(dedup.ch.type.cell_lines[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == "Total RNA"]])`
zeros_total$`rowSums(dedup.ch.type.cell_lines[, rownames(cell_lines_clusters)[cell_lines_clusters$protocol == "Total RNA"]])` <- NULL
zeros = log10((zeros_total + 10^-10)/zeros_AAA) # для того чтобы убрать гены которые не экспрессируются в poly-A
View(zeros)
View(tumor_clusters)
total_meta <- cell_lines_clusters + tumor_clusters[ , c('name2', 'Subtype')]
tumor_clusters <- tumor_clusters %>% select(name2) %>% mutate(protocol = "poly-A")
View(tumor_clusters)
# Load expression metadata
tumor_clusters <- read.csv("C:/Users/natal/PycharmProjects/contests/promoters/october2025/TCGA_only_labeled_meta.csv", header = TRUE, row.names = 1)
tumor_clusters <- tumor_clusters %>% select(name2) %>% rename(cluster = name2) %>% mutate(protocol = "poly-A")
View(tumor_clusters)
cell_lines_clusters <- cell_lines_clusters %>% rename(cluster = Cell.name)
cell_lines_clusters <- cell_lines_clusters %>% rename(cluster = Cell.line)
total_meta <- cell_lines_clusters + tumor_clusters
total_meta <- merge(cell_lines_clusters,tumor_clusters)
total_meta <- merge(cell_lines_clusters, tumor_clusters, all = TRUE)
View(total_meta)
total_meta <- total_meta[!is.na(total_meta$protocol) & total_meta$protocol != "", ]
View(total_meta)
View(all_counts)
# Create DGEList object for downstream analysis
Total.DGE <- DGEList(all_counts[names(which(zeros != Inf)),rownames(total_meta)],
genes = names(which(zeros != Inf)),
samples = rownames(total_meta),
group = unlist(total_meta$cluster, use.names = F))
View(all_counts)
View(zeros)
# Create DGEList object for downstream analysis
Total.DGE <- DGEList(all_counts[names(which(zeros$expression != Inf)),rownames(total_meta)],
genes = names(which(zeros != Inf)),
samples = rownames(total_meta),
group = unlist(total_meta$cluster, use.names = F))
# Create DGEList object for downstream analysis
Total.DGE <- DGEList(all_counts[rownames(which(zeros$expression != Inf)),rownames(total_meta)],
genes = names(which(zeros != Inf)),
samples = rownames(total_meta),
group = unlist(total_meta$cluster, use.names = F))
setdiff(rownames(total_meta), colnames(all_counts))
